// Code generated by MockGen. DO NOT EDIT.
// Source: ../account/watcher/interface.go

// Package watcher is a generated GoMock package.
package watcher

import (
	context "context"
	reflect "reflect"

	btcec "github.com/btcsuite/btcd/btcec"
	chainhash "github.com/btcsuite/btcd/chaincfg/chainhash"
	wire "github.com/btcsuite/btcd/wire"
	gomock "github.com/golang/mock/gomock"
	chainntnfs "github.com/lightningnetwork/lnd/chainntnfs"
)

// MockChainNotifierClient is a mock of ChainNotifierClient interface.
type MockChainNotifierClient struct {
	ctrl     *gomock.Controller
	recorder *MockChainNotifierClientMockRecorder
}

// MockChainNotifierClientMockRecorder is the mock recorder for MockChainNotifierClient.
type MockChainNotifierClientMockRecorder struct {
	mock *MockChainNotifierClient
}

// NewMockChainNotifierClient creates a new mock instance.
func NewMockChainNotifierClient(ctrl *gomock.Controller) *MockChainNotifierClient {
	mock := &MockChainNotifierClient{ctrl: ctrl}
	mock.recorder = &MockChainNotifierClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChainNotifierClient) EXPECT() *MockChainNotifierClientMockRecorder {
	return m.recorder
}

// RegisterBlockEpochNtfn mocks base method.
func (m *MockChainNotifierClient) RegisterBlockEpochNtfn(ctx context.Context) (chan int32, chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBlockEpochNtfn", ctx)
	ret0, _ := ret[0].(chan int32)
	ret1, _ := ret[1].(chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RegisterBlockEpochNtfn indicates an expected call of RegisterBlockEpochNtfn.
func (mr *MockChainNotifierClientMockRecorder) RegisterBlockEpochNtfn(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBlockEpochNtfn", reflect.TypeOf((*MockChainNotifierClient)(nil).RegisterBlockEpochNtfn), ctx)
}

// RegisterConfirmationsNtfn mocks base method.
func (m *MockChainNotifierClient) RegisterConfirmationsNtfn(ctx context.Context, txid *chainhash.Hash, pkScript []byte, numConfs, heightHint int32) (chan *chainntnfs.TxConfirmation, chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterConfirmationsNtfn", ctx, txid, pkScript, numConfs, heightHint)
	ret0, _ := ret[0].(chan *chainntnfs.TxConfirmation)
	ret1, _ := ret[1].(chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RegisterConfirmationsNtfn indicates an expected call of RegisterConfirmationsNtfn.
func (mr *MockChainNotifierClientMockRecorder) RegisterConfirmationsNtfn(ctx, txid, pkScript, numConfs, heightHint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterConfirmationsNtfn", reflect.TypeOf((*MockChainNotifierClient)(nil).RegisterConfirmationsNtfn), ctx, txid, pkScript, numConfs, heightHint)
}

// RegisterSpendNtfn mocks base method.
func (m *MockChainNotifierClient) RegisterSpendNtfn(ctx context.Context, outpoint *wire.OutPoint, pkScript []byte, heightHint int32) (chan *chainntnfs.SpendDetail, chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterSpendNtfn", ctx, outpoint, pkScript, heightHint)
	ret0, _ := ret[0].(chan *chainntnfs.SpendDetail)
	ret1, _ := ret[1].(chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RegisterSpendNtfn indicates an expected call of RegisterSpendNtfn.
func (mr *MockChainNotifierClientMockRecorder) RegisterSpendNtfn(ctx, outpoint, pkScript, heightHint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSpendNtfn", reflect.TypeOf((*MockChainNotifierClient)(nil).RegisterSpendNtfn), ctx, outpoint, pkScript, heightHint)
}

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// CancelAccountConf mocks base method.
func (m *MockController) CancelAccountConf(traderKey *btcec.PublicKey) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CancelAccountConf", traderKey)
}

// CancelAccountConf indicates an expected call of CancelAccountConf.
func (mr *MockControllerMockRecorder) CancelAccountConf(traderKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelAccountConf", reflect.TypeOf((*MockController)(nil).CancelAccountConf), traderKey)
}

// CancelAccountSpend mocks base method.
func (m *MockController) CancelAccountSpend(traderKey *btcec.PublicKey) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CancelAccountSpend", traderKey)
}

// CancelAccountSpend indicates an expected call of CancelAccountSpend.
func (mr *MockControllerMockRecorder) CancelAccountSpend(traderKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelAccountSpend", reflect.TypeOf((*MockController)(nil).CancelAccountSpend), traderKey)
}

// Start mocks base method.
func (m *MockController) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockControllerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockController)(nil).Start))
}

// Stop mocks base method.
func (m *MockController) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockControllerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockController)(nil).Stop))
}

// WatchAccountConf mocks base method.
func (m *MockController) WatchAccountConf(traderKey *btcec.PublicKey, txHash chainhash.Hash, script []byte, numConfs, heightHint uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchAccountConf", traderKey, txHash, script, numConfs, heightHint)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchAccountConf indicates an expected call of WatchAccountConf.
func (mr *MockControllerMockRecorder) WatchAccountConf(traderKey, txHash, script, numConfs, heightHint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchAccountConf", reflect.TypeOf((*MockController)(nil).WatchAccountConf), traderKey, txHash, script, numConfs, heightHint)
}

// WatchAccountExpiration mocks base method.
func (m *MockController) WatchAccountExpiration(traderKey *btcec.PublicKey, expiry uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchAccountExpiration", traderKey, expiry)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchAccountExpiration indicates an expected call of WatchAccountExpiration.
func (mr *MockControllerMockRecorder) WatchAccountExpiration(traderKey, expiry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchAccountExpiration", reflect.TypeOf((*MockController)(nil).WatchAccountExpiration), traderKey, expiry)
}

// WatchAccountSpend mocks base method.
func (m *MockController) WatchAccountSpend(traderKey *btcec.PublicKey, accountPoint wire.OutPoint, script []byte, heightHint uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchAccountSpend", traderKey, accountPoint, script, heightHint)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchAccountSpend indicates an expected call of WatchAccountSpend.
func (mr *MockControllerMockRecorder) WatchAccountSpend(traderKey, accountPoint, script, heightHint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchAccountSpend", reflect.TypeOf((*MockController)(nil).WatchAccountSpend), traderKey, accountPoint, script, heightHint)
}

// MockExecutor is a mock of Executor interface.
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor.
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance.
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// AddAccountExpiration mocks base method.
func (m *MockExecutor) AddAccountExpiration(traderKey *btcec.PublicKey, expiry uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddAccountExpiration", traderKey, expiry)
}

// AddAccountExpiration indicates an expected call of AddAccountExpiration.
func (mr *MockExecutorMockRecorder) AddAccountExpiration(traderKey, expiry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccountExpiration", reflect.TypeOf((*MockExecutor)(nil).AddAccountExpiration), traderKey, expiry)
}

// ExecuteOverdueExpirations mocks base method.
func (m *MockExecutor) ExecuteOverdueExpirations(blockHeight uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ExecuteOverdueExpirations", blockHeight)
}

// ExecuteOverdueExpirations indicates an expected call of ExecuteOverdueExpirations.
func (mr *MockExecutorMockRecorder) ExecuteOverdueExpirations(blockHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteOverdueExpirations", reflect.TypeOf((*MockExecutor)(nil).ExecuteOverdueExpirations), blockHeight)
}

// HandleAccountConf mocks base method.
func (m *MockExecutor) HandleAccountConf(traderKey *btcec.PublicKey, confDetails *chainntnfs.TxConfirmation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleAccountConf", traderKey, confDetails)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleAccountConf indicates an expected call of HandleAccountConf.
func (mr *MockExecutorMockRecorder) HandleAccountConf(traderKey, confDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleAccountConf", reflect.TypeOf((*MockExecutor)(nil).HandleAccountConf), traderKey, confDetails)
}

// HandleAccountExpiry mocks base method.
func (m *MockExecutor) HandleAccountExpiry(traderKey *btcec.PublicKey, height uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleAccountExpiry", traderKey, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleAccountExpiry indicates an expected call of HandleAccountExpiry.
func (mr *MockExecutorMockRecorder) HandleAccountExpiry(traderKey, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleAccountExpiry", reflect.TypeOf((*MockExecutor)(nil).HandleAccountExpiry), traderKey, height)
}

// HandleAccountSpend mocks base method.
func (m *MockExecutor) HandleAccountSpend(traderKey *btcec.PublicKey, spendDetails *chainntnfs.SpendDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleAccountSpend", traderKey, spendDetails)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleAccountSpend indicates an expected call of HandleAccountSpend.
func (mr *MockExecutorMockRecorder) HandleAccountSpend(traderKey, spendDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleAccountSpend", reflect.TypeOf((*MockExecutor)(nil).HandleAccountSpend), traderKey, spendDetails)
}

// NewBlock mocks base method.
func (m *MockExecutor) NewBlock(bestHeight uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NewBlock", bestHeight)
}

// NewBlock indicates an expected call of NewBlock.
func (mr *MockExecutorMockRecorder) NewBlock(bestHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBlock", reflect.TypeOf((*MockExecutor)(nil).NewBlock), bestHeight)
}
